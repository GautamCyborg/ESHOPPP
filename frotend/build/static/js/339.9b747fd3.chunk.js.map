{"version":3,"file":"static/js/339.9b747fd3.chunk.js","mappings":"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","sources":["component/Admin/UpdateProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useAlert } from \"react-alert\";\nimport MetaData from \"../layouts/MataData/MataData\";\nimport Loader from \"../layouts/loader/Loader\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport StorageIcon from \"@material-ui/icons/Storage\";\nimport {\n  Avatar,\n  Button,\n  TextField,\n  Typography,\n  FormControl,\n} from \"@material-ui/core\";\nimport Sidebar from \"./Siderbar\";\nimport {\n  updateProduct,\n  clearErrors,\n  getProductDetails,\n} from \"../../actions/productAction\";\nimport { useHistory } from \"react-router-dom\";\nimport { UPDATE_PRODUCT_RESET } from \"../../constants/productsConstatns\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Box from \"@material-ui/core/Box\";\nimport ShoppingCartOutlinedIcon from \"@material-ui/icons/ShoppingCartOutlined\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport CollectionsIcon from \"@mui/icons-material/Collections\";\nimport Select from \"@material-ui/core/Select\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Navbar from \"./Navbar\";\nimport useStyles from \"../User/LoginFromStyle\";\nfunction UpdateProduct() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const alert = useAlert();\n\n  const classes = useStyles();\n  const productId = useRouteMatch().params.id;\n  const { error, product } = useSelector((state) => state.productDetails);\n\n  const { loading, error: updateError, isUpdated } = useSelector(\n    (state) => state.deleteUpdateProduct\n  );\n\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [isCategory, setIsCategory] = useState(false);\n  const [Stock, setStock] = useState(0);\n  const [images, setImages] = useState([]);\n  const [info , setInfo] = useState('');\n  const [imagesPreview, setImagesPreview] = useState([]);\n  const [oldImages, setOldImages] = useState([]);\n  const fileInputRef = useRef();\n  const [toggle, setToggle] = useState(false);\n  const categories = [\n    \"Electronics\",\n    \"Bags\",\n    \"Grocery\",\n    \"Furniture\",\n    \"Toys\",\n    \"Foods and beverages\",\n    \"Cosmetics\",\n    \"Shoes\",\n    \"Clothing\",\n    \"Accessories\",\n  ];\n  const handleCategoryChange = (e) => {\n    setCategory(e.target.value);\n    setIsCategory(true);\n  };\n\n  useEffect(() => {\n    if (product && product._id !== productId) {\n      dispatch(getProductDetails(productId));\n    } else {\n      setName(product.name);\n      setDescription(product.description);\n      setPrice(product.price);\n      setCategory(\"\");\n      setInfo(product.info);  \n      setStock(product.Stock);\n      setOldImages(product.images);\n    }\n\n    if (error) {\n      alert.error(error);\n      dispatch(clearErrors());\n    }\n\n    if (updateError) {\n      alert.error(updateError);\n      dispatch(clearErrors());\n    }\n\n    if (isUpdated) {\n      alert.success(\"Product Updated Successfully\");\n      history.push(\"/admin/products\");\n      dispatch({ type: UPDATE_PRODUCT_RESET });\n    }\n  }, [\n    dispatch,\n    alert,\n    error,\n    history,\n    isUpdated,\n    productId,\n    product,\n    updateError,\n  ]);\n\n  const createProductSubmitHandler = (e) => {\n    e.preventDefault();\n    const myForm = new FormData();\n    myForm.set(\"name\", name);\n    myForm.set(\"price\", price);\n    myForm.set(\"description\", description);\n    myForm.set(\"category\", category);\n    myForm.set(\"Stock\", Stock);\n    myForm.set(\"info\", info);\n    images.forEach((currImg) => {\n      myForm.append(\"images\", currImg);\n    });\n\n\n    dispatch(updateProduct(productId, myForm));\n  };\n\n\n  const handleImageUpload = () => {\n    fileInputRef.current.click();\n  };\n\n  const updateProductImagesChange = (e) => {\n    const files = Array.from(e.target.files);\n    setImages([]);\n    setImagesPreview([]);\n    setOldImages([]);\n    files.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setImagesPreview((prev) => [...prev, reader.result]);\n          setImages((prev) => [...prev, reader.result]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n  // togle handler =>\n  const toggleHandler = () => {\n    console.log(\"toggle\");\n    setToggle(!toggle);\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <>\n            <MetaData title=\"Create Product\" />\n            <div className={classes.updateProduct}>\n              <div\n                className={\n                  !toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`\n                }\n              >\n                <Sidebar />\n              </div>\n              <div className={classes.secondBox1}>\n                <div className={classes.navBar1}>\n                  <Navbar toggleHandler={toggleHandler} />\n                </div>\n\n                <div\n                  className={`${classes.formContainer} ${classes.formContainer2}`}\n                >\n                  <form\n                    className={`${classes.form} ${classes.form2}`}\n                    encType=\"multipart/form-data\"\n                  >\n                    <Avatar className={classes.avatar}>\n                      <AddCircleOutlineIcon />\n                    </Avatar>\n                    <Typography\n                      variant=\"h5\"\n                      component=\"h1\"\n                      className={classes.heading}\n                    >\n                      Create Product\n                    </Typography>\n                    {/* SpellcheckIcon */}\n                    <TextField\n                      variant=\"outlined\"\n                      fullWidth\n                      className={`${classes.nameInput} ${classes.textField}`}\n                      label=\"Product Name\"\n                      required\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <ShoppingCartOutlinedIcon\n                              style={{\n                                fontSize: 20,\n                                color: \"#414141\",\n                              }}\n                            />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Price\"\n                      value={price}\n                      required\n                      fullWidth\n                      className={`${classes.passwordInput} ${classes.textField}`}\n                      onChange={(e) => setPrice(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment\n                            position=\"end\"\n                            style={{\n                              fontSize: 20,\n                              color: \"#414141\",\n                            }}\n                          >\n                            <AttachMoneyIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Stock\"\n                      value={Stock}\n                      required\n                      className={`${classes.passwordInput} ${classes.textField}`}\n                      onChange={(e) => setStock(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment\n                            position=\"end\"\n                            style={{\n                              fontSize: 20,\n                              color: \"#414141\",\n                            }}\n                          >\n                            <StorageIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                    <TextField\n                      variant=\"outlined\"\n                      label=\"Prodcut Info\"\n                      value={info}\n                      required\n                      className={`${classes.passwordInput} ${classes.textField}`}\n                      onChange={(e) => setInfo(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment\n                            position=\"end\"\n                            style={{\n                              fontSize: 20,\n                              color: \"#414141\",\n                            }}\n                          >\n                            <InfoIcon />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n\n                    <div className={classes.selectOption}>\n                      {!isCategory && (\n                        <Typography\n                          variant=\"body2\"\n                          className={classes.labelText}\n                        >\n                          Choose Category\n                        </Typography>\n                      )}\n                      <FormControl className={classes.formControl}>\n                        <Select\n                          variant=\"outlined\"\n                          fullWidth\n                          value={category}\n                          onChange={handleCategoryChange}\n                          className={classes.select}\n                          inputProps={{\n                            name: \"category\",\n                            id: \"category-select\",\n                          }}\n                          MenuProps={{\n                            classes: {\n                              paper: classes.menu,\n                            },\n                            anchorOrigin: {\n                              vertical: \"bottom\",\n                              horizontal: \"left\",\n                            },\n                            transformOrigin: {\n                              vertical: \"top\",\n                              horizontal: \"left\",\n                            },\n                            getContentAnchorEl: null,\n                          }}\n                        >\n                          {!category && (\n                            <MenuItem value=\"\">\n                              <em>Choose Category</em>\n                            </MenuItem>\n                          )}\n                          {categories.map((cate) => (\n                            <MenuItem key={cate} value={cate}>\n                              {cate}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </div>\n\n                    <TextField\n                      variant=\"outlined\"\n                      fullWidth\n                      className={classes.descriptionInput}\n                      label=\"Product Description\"\n                      multiline\n                      rows={1}\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <DescriptionIcon\n                              className={classes.descriptionIcon}\n                            />\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n\n                    <div className={classes.root}>\n                      <div className={classes.imgIcon}>\n                        <CollectionsIcon\n                          fontSize=\"large\"\n                          style={{ fontSize: 40 }}\n                        />\n                      </div>\n\n                      <input\n                        type=\"file\"\n                        name=\"avatar\"\n                        className={classes.input}\n                        accept=\"image/*\"\n                        onChange={updateProductImagesChange}\n                        multiple\n                        style={{ display: \"none\" }}\n                        ref={fileInputRef}\n                      />\n                      <label htmlFor=\"avatar-input\">\n                        <Button\n                          variant=\"contained\"\n                          color=\"default\"\n                          className={classes.uploadAvatarButton}\n                          startIcon={\n                            <CloudUploadIcon\n                              style={{\n                                color: \"#FFFFFF\",\n                              }}\n                            />\n                          }\n                          onClick={handleImageUpload}\n                        >\n                          <p className={classes.uploadAvatarText}>\n                            Upload Images\n                          </p>\n                        </Button>\n                      </label>\n                    </div>\n\n                    {imagesPreview.length > 0 ? (\n                      <Box className={classes.imageArea}>\n                        {imagesPreview &&\n                          imagesPreview.map((image, index) => (\n                            <img\n                              key={index}\n                              src={image}\n                              alt=\"Product Preview\"\n                              className={classes.image}\n                            />\n                          ))}\n                      </Box>\n                    ) : (\n                      <Box className={classes.imageArea}>\n                        {oldImages &&\n                          oldImages.map((image, index) => (\n                            <img\n                              key={index}\n                              src={image.url}\n                              alt=\"Old Product Preview\"\n                              className={classes.image}\n                            />\n                          ))}\n                      </Box>\n                    )}\n\n                    <Button\n                      variant=\"contained\"\n                      className={classes.loginButton}\n                      fullWidth\n                      onClick={createProductSubmitHandler}\n                      disabled={loading ? true : false}\n                    >\n                      Create\n                    </Button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </>\n        </>\n      )}\n    </>\n  );\n}\nexport default UpdateProduct;\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","classes","useStyles","productId","useRouteMatch","params","id","_useSelector","useSelector","state","productDetails","error","product","_useSelector2","deleteUpdateProduct","loading","updateError","isUpdated","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","price","setPrice","_useState5","_useState6","description","setDescription","_useState7","_useState8","category","setCategory","_useState9","_useState10","isCategory","setIsCategory","_useState11","_useState12","Stock","setStock","_useState13","_useState14","images","setImages","_useState15","_useState16","info","setInfo","_useState17","_useState18","imagesPreview","setImagesPreview","_useState19","_useState20","oldImages","setOldImages","fileInputRef","useRef","_useState21","_useState22","toggle","setToggle","useEffect","_id","getProductDetails","clearErrors","success","push","type","UPDATE_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","console","log","formContainer","formContainer2","form","form2","encType","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","imgIcon","CollectionsIcon","input","accept","files","Array","from","forEach","file","reader","FileReader","onload","readyState","prev","_toConsumableArray","result","readAsDataURL","multiple","display","ref","htmlFor","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","current","click","uploadAvatarText","length","Box","imageArea","image","index","src","alt","url","loginButton","preventDefault","myForm","FormData","set","currImg","append","disabled"],"sourceRoot":""}